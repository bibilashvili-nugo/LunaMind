// src/app/api/register/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";
import type { Role } from "@prisma/client";
import { emailRegex, isValidPassword, isValidPhone } from "@/utils/validation";

interface RegisterRequest {
  fullName: string;
  role: Role;
  email: string;
  phoneNumber: string;
  password: string;
  acceptedTerms: boolean;
  acceptedPrivacy: boolean;
}

export async function POST(req: Request) {
  try {
    const body: RegisterRequest = await req.json();

    // Trim inputs
    const fullName = body.fullName.trim();
    const email = body.email.trim().toLowerCase();
    const phoneNumber = body.phoneNumber.trim();
    const password = body.password;
    const role = body.role;
    const acceptedTerms = body.acceptedTerms;
    const acceptedPrivacy = body.acceptedPrivacy;

    // 1Ô∏è‚É£ Required fields
    if (!fullName || !role || !email || !phoneNumber || !password) {
      return NextResponse.json(
        { message: "·Éß·Éï·Éî·Éö·Éê ·Éï·Éî·Éö·Éò ·É°·Éê·Éï·Éê·Éö·Éì·Éî·Éë·É£·Éö·Éù·Éê" },
        { status: 400 }
      );
    }

    // 2Ô∏è‚É£ Full name validation (at least 2 characters each)
    const [firstName, ...lastNameParts] = fullName.split(" ");
    const lastName = lastNameParts.join(" ") || "";
    if (firstName.length < 2 || lastName.length < 2) {
      return NextResponse.json(
        { message: "·É°·Éê·ÉÆ·Éî·Éö·Éò ·Éì·Éê ·Éí·Éï·Éê·É†·Éò ·É£·Éú·Éì·Éê ·Éò·Éß·Éù·É° ·Éõ·Éò·Éú·Éò·Éõ·É£·Éõ 2 ·Éê·É°·Éù" },
        { status: 400 }
      );
    }

    // 3Ô∏è‚É£ Email validation
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { message: "·Éî·Éö·É§·Éù·É°·É¢·Éê ·Éê·É†·Éê·É°·É¨·Éù·É†·Éò·Éê" },
        { status: 400 }
      );
    }

    // 4Ô∏è‚É£ Password strength
    if (!isValidPassword(password)) {
      return NextResponse.json(
        {
          message:
            "·Éû·Éê·É†·Éù·Éö·Éò ·É£·Éú·Éì·Éê ·É®·Éî·Éò·É™·Éê·Éï·Éì·Éî·É° ·Éõ·Éò·Éú·Éò·Éõ·É£·Éõ 8 ·É°·Éò·Éõ·Éë·Éù·Éö·Éù·É°, ·Éî·É†·Éó ·Éì·Éò·Éì ·Éê·É°·Éù·É° ·Éì·Éê ·Éî·É†·Éó ·É™·Éò·É§·É†·É°",
        },
        { status: 400 }
      );
    }

    // 5Ô∏è‚É£ Phone validation (digits only, 9-15 digits)
    if (!isValidPhone(phoneNumber)) {
      return NextResponse.json(
        { message: "·É¢·Éî·Éö·Éî·É§·Éù·Éú·Éò ·Éê·É†·Éê·É°·É¨·Éù·É†·Éò·Éê" },
        { status: 400 }
      );
    }

    // 6Ô∏è‚É£ Terms & Privacy
    if (!acceptedTerms || !acceptedPrivacy) {
      return NextResponse.json(
        { message: "·É£·Éú·Éì·Éê ·Éì·Éê·Éî·Éó·Éê·Éú·ÉÆ·Éõ·Éù ·É¨·Éî·É°·Éî·Éë·É° ·Éì·Éê ·Éû·Éù·Éö·Éò·É¢·Éò·Éô·Éê·É°" },
        { status: 400 }
      );
    }

    // 7Ô∏è‚É£ Check if email already exists
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return NextResponse.json(
        { message: "·Éî·É° ·Éî·Éö·É§·Éù·É°·É¢·Éê ·É£·Éô·Éï·Éî ·Éí·Éê·Éõ·Éù·Éß·Éî·Éú·Éî·Éë·É£·Éö·Éò·Éê" },
        { status: 400 }
      );
    }

    // 8Ô∏è‚É£ Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // 9Ô∏è‚É£ Create user
    const user = await prisma.user.create({
      data: {
        role,
        firstName,
        lastName,
        email,
        phoneNumber,
        passwordHash: hashedPassword,
        acceptedTerms,
        acceptedPrivacy,
      },
    });

    //  üîí Remove sensitive info before sending to client
    const safeUser = {
      id: user.id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      phoneNumber: user.phoneNumber,
      role: user.role,
    };

    return NextResponse.json(
      { message: "·É†·Éî·Éí·Éò·É°·É¢·É†·Éê·É™·Éò·Éê ·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·É£·Éö·Éò·Éê", user: safeUser },
      { status: 201 }
    );
  } catch (err: unknown) {
    console.error(err);
    const message =
      err instanceof Error ? err.message : "·É£·É™·Éú·Éù·Éë·Éò ·É°·Éî·É†·Éï·Éî·É†·Éò·É° ·É®·Éî·É™·Éì·Éù·Éõ·Éê";

    return NextResponse.json({ message }, { status: 500 });
  }
}
